import CoursePlanPage from '../page-objects/CoursePlanPage'
import EbookEditorPage from '../page-objects/ResourceLibrary.js/EbookEditorPage'


const backDoor = require('../data/Backdoor.json');
const resourceData = require('../data/ResourceLibrary.json');
const ebookData = require('../data/Ebook.json')


describe("Open Ebook Editor successfully", () => {
  const eBook = new EbookEditorPage()
  beforeEach(() => {
    cy.launchCourse(backDoor.email, backDoor.course1)
    cy.url().should('contain', 'course-plan')
    cy.clickALinkText(resourceData.linkResourceLibrary)
    cy.url().should('contain', 'catalog')
  })

  it("Open Ebook Editor successfully", () => {
    cy.navigateToItemEditor('eBook Reading')
    eBook.verifyEbookEditorOpenSuccess()
  })
})

describe('Verify Ebook Assignment Editor', () => {
  const eBook = new EbookEditorPage()
  before(() => {
    cy.launchCourse(backDoor.email, backDoor.course1)
    cy.clickALinkText(resourceData.linkResourceLibrary)
    cy.navigateToItemEditor('eBook Reading')
    eBook.verifyEbookEditorOpenSuccess()
  })

  afterEach(() => {
    eBook.closeEbookAssignmentEditor()
    cy.clickALinkText(resourceData.linkResourceLibrary)
    cy.navigateToItemEditor('eBook Reading')
    eBook.verifyEbookEditorOpenSuccess()
  });

  it("Select an eBook by name", () => {
    eBook.selectEbookByName(ebookData.bookName)
    eBook.verifyEbookAssignmentDialogNotExist()
  })

  it('Validate valid/ invalid page range value', () => {
    eBook.selectEbookByName(ebookData.bookName)
    eBook.selectChapterByName(ebookData.chapterName)
    eBook.verifyPagerange(ebookData.pageRanges)
  });

  it('Verify user is able to select multiple chapters & page ranges', () => {
    eBook.selectEbookByName('Fake Cooper Ebook')
    ebookData.multipleChapters.forEach((element) => {
      cy.setChapterAndPageRange(element[0], element[1], element[2])
    })
  })

  it("Choose Reading successfully", () => {
    eBook.verifyChooseReadingCorrectly(ebookData.bookName, ebookData.chapterName, '2-22')
  })

  });

  describe('Create an ebook assignment successfully', () => {
    const eBook = new EbookEditorPage()
    const coursePlan = new CoursePlanPage()
    before(() => {
      cy.launchCourse(backDoor.email, backDoor.course1)
      cy.clickALinkText(resourceData.linkResourceLibrary)
      cy.navigateToItemEditor('eBook Reading')
      eBook.verifyEbookEditorOpenSuccess()
    })

    afterEach(()=>{
      cy.clickALinkText(resourceData.linkResourceLibrary)
      cy.navigateToItemEditor('eBook Reading')
    })

    it('Verify eBook should not be created when cancelling the assignment', () => {
      eBook.selectEbookByName(ebookData.bookName)
      cy.setChapterAndPageRange(ebookData.chapterName,ebookData.defaultpageRange)
      eBook.clickNextStep()
      eBook.closeEbookAssignmentEditor()
      cy.verifyMoveModalNOTDisplay()
    });

    it('Create eBook from Resource Library page successfully', () => {
      const title = 'Potter 10e'
      eBook.createEbookFromResourcePage(ebookData.bookName, ebookData.chapterName, ebookData.defaultpageRange)
      coursePlan.verifyMoveModalDisplay()
      cy.moveItemToFolder(ebookData.destination, 0)
      cy.verifyItemDetails(ebookData.destination,title,0)
      cy.verifyAssignmentHasDueDate(ebookData.destination,0)

})

  })




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































